version: "3.8"
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"

  neo4j:
    image: neo4j:5-enterprise
    container_name: neo4j
    environment:
      NEO4J_AUTH: neo4j/neo4jpassword
      NEO4J_ACCEPT_LICENSE_AGREEMENT: "yes"
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - neo4j_data:/data

  asset_discovery:
    build: ./sensors/asset_discovery
    container_name: asset_discovery
    environment:
      NETWORK_RANGE: "192.168.1.0/24"
      SCAN_INTERVAL_SECONDS: 900
      KAFKA_BOOTSTRAP: "kafka:9092"
      KAFKA_TOPIC: "asset.discovery"
    depends_on:
      - kafka
    # Uncomment to run interactively for debugging
    # stdin_open: true
    # tty: true

  topology_updater:
    build: ./services/topology_updater
    container_name: topology_updater
    environment:
      KAFKA_BOOTSTRAP: "kafka:9092"
      KAFKA_TOPIC: "asset.discovery"
      NEO4J_URI: "bolt://neo4j:7687"
      NEO4J_USER: "neo4j"
      NEO4J_PASSWORD: "neo4jpassword"
    depends_on:
      - kafka
      - neo4j

  traffic_analysis:
    build: ./sensors/traffic_analysis
    container_name: traffic_analysis
    environment:
      INTERFACE: "eth0"
      FLOW_WINDOW_SECONDS: 30
      KAFKA_BOOTSTRAP: "kafka:9092"
      KAFKA_TOPIC: "netflow"
    depends_on:
      - kafka
    network_mode: "host"

  encrypted_traffic_analysis:
    build: ./sensors/encrypted_traffic_analysis
    container_name: encrypted_traffic_analysis
    environment:
      INTERFACE: "eth0"
      KAFKA_BOOTSTRAP: "kafka:9092"
      KAFKA_TOPIC: "tls.meta"
    depends_on:
      - kafka
    network_mode: "host"

  suricata:
    image: jasonish/suricata:latest
    container_name: suricata
    network_mode: "host"
    volumes:
      - suricata_logs:/var/log/suricata
    command: ["-i", "eth0"]

  ids_alert_forwarder:
    build: ./sensors/ids_alert_forwarder
    container_name: ids_alert_forwarder
    environment:
      EVE_FILE: "/var/log/suricata/eve.json"
      KAFKA_BOOTSTRAP: "kafka:9092"
      KAFKA_TOPIC: "security.alerts"
    volumes:
      - suricata_logs:/var/log/suricata:ro
    depends_on:
      - kafka
      - suricata

ksqldb-server:
    image: confluentinc/ksqldb-server:latest
    container_name: ksqldb-server
    depends_on:
      - kafka
    environment:
      KSQL_CONFIG_DIR: "/etc/ksqldb"
      KSQL_BOOTSTRAP_SERVERS: "kafka:9092"
      KSQL_LISTENERS: "http://0.0.0.0:8088"
      KSQL_KSQL_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
    ports:
      - "8088:8088"
    # schema-registry optional, but ksqlDB will warn if not present

  ksqldb-cli:
    image: confluentinc/ksqldb-cli:latest
    container_name: ksqldb-cli
    depends_on:
      - ksqldb-server
    entrypoint: ["/bin/sh", "-c"]
    command:
      - |
        echo "Waiting for ksqlDB server..." && \
        while ! nc -z ksqldb-server 8088; do sleep 1; done; \
        echo "Bootstrapping ksqlDB..." && \
        ksql http://ksqldb-server:8088 < /init.sql && \
        tail -f /dev/null
    volumes:
      - ./stream_aggregation/init.sql:/init.sql:ro

alert_sink_neo4j:
    build: ./services/alert_sink_neo4j
    container_name: alert_sink_neo4j
    environment:
      KAFKA_BOOTSTRAP: "kafka:9092"
      KAFKA_TOPIC: "alert.correlated"
      NEO4J_URI: "bolt://neo4j:7687"
      NEO4J_USER: "neo4j"
      NEO4J_PASSWORD: "neo4jpassword"
    depends_on:
      - kafka
      - neo4j

zeek:
    image: blacktop/zeek:latest
    container_name: zeek
    network_mode: "host"
    command: ["-i", "eth0", "-C", "Local::enable_local_scripts=F", "LogAscii::json=T"]
    volumes:
      - zeek_logs:/usr/local/zeek/logs

  dpi_event_forwarder:
    build: ./sensors/dpi_event_forwarder
    container_name: dpi_event_forwarder
    volumes:
      - zeek_logs:/usr/local/zeek/logs:ro
    environment:
      LOG_DIR: "/usr/local/zeek/logs/current"
      KAFKA_BOOTSTRAP: "kafka:9092"
      KAFKA_TOPIC: "dpi.events"
    depends_on:
      - kafka
      - zeek

geoip_enricher:
    build: ./services/geoip_enricher
    container_name: geoip_enricher
    environment:
      KAFKA_BOOTSTRAP: "kafka:9092"
      IN_TOPIC: "netflow"
      OUT_TOPIC: "geo.flows"
      HTTP_PORT: 5000
    volumes:
      - ./GeoLite2-City.mmdb:/geoip/GeoLite2-City.mmdb:ro
    depends_on:
      - kafka

  ui:
    build: ./ui
    container_name: ui
    ports:
      - "8080:80"
    depends_on:
      - geoip_enricher

volumes:
  neo4j_data:
  suricata_logs:
  zeek_logs: